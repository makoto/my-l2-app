{"version":3,"file":"static/js/420.306cb7d5.chunk.js","mappings":"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","sources":["../node_modules/viem/src/errors/ccip.ts","../node_modules/viem/src/utils/address/isAddressEqual.ts","../node_modules/viem/src/utils/ccip.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Hex } from '../types/misc.js'\nimport { stringify } from '../utils/stringify.js'\n\nimport { BaseError } from './base.js'\nimport { getUrl } from './utils.js'\n\nexport class OffchainLookupError extends BaseError {\n  override name = 'OffchainLookupError'\n  constructor({\n    callbackSelector,\n    cause,\n    data,\n    extraData,\n    sender,\n    urls,\n  }: {\n    callbackSelector: Hex\n    cause: BaseError\n    data: Hex\n    extraData: Hex\n    sender: Address\n    urls: readonly string[]\n  }) {\n    super(\n      cause.shortMessage ||\n        'An error occurred while fetching for an offchain result.',\n      {\n        cause,\n        metaMessages: [\n          ...(cause.metaMessages || []),\n          cause.metaMessages?.length ? '' : [],\n          'Offchain Gateway Call:',\n          urls && [\n            '  Gateway URL(s):',\n            ...urls.map((url) => `    ${getUrl(url)}`),\n          ],\n          `  Sender: ${sender}`,\n          `  Data: ${data}`,\n          `  Callback selector: ${callbackSelector}`,\n          `  Extra data: ${extraData}`,\n        ].flat(),\n      },\n    )\n  }\n}\n\nexport class OffchainLookupResponseMalformedError extends BaseError {\n  override name = 'OffchainLookupResponseMalformedError'\n  constructor({ result, url }: { result: any; url: string }) {\n    super(\n      'Offchain gateway response is malformed. Response data must be a hex value.',\n      {\n        metaMessages: [\n          `Gateway URL: ${getUrl(url)}`,\n          `Response: ${stringify(result)}`,\n        ],\n      },\n    )\n  }\n}\n\nexport class OffchainLookupSenderMismatchError extends BaseError {\n  override name = 'OffchainLookupSenderMismatchError'\n  constructor({ sender, to }: { sender: Address; to: Address }) {\n    super(\n      'Reverted sender address does not match target contract address (`to`).',\n      {\n        metaMessages: [\n          `Contract address: ${to}`,\n          `OffchainLookup sender address: ${sender}`,\n        ],\n      },\n    )\n  }\n}\n","import type { Address } from 'abitype'\n\nimport { InvalidAddressError } from '../../errors/address.js'\n\nimport { isAddress } from './isAddress.js'\n\nexport function isAddressEqual(a: Address, b: Address) {\n  if (!isAddress(a)) throw new InvalidAddressError({ address: a })\n  if (!isAddress(b)) throw new InvalidAddressError({ address: b })\n  return a.toLowerCase() === b.toLowerCase()\n}\n","import type { Abi, Address } from 'abitype'\n\nimport { type CallParameters, call } from '../actions/public/call.js'\nimport type { Transport } from '../clients/transports/createTransport.js'\nimport { type BaseError } from '../errors/base.js'\nimport {\n  OffchainLookupError,\n  OffchainLookupResponseMalformedError,\n  OffchainLookupSenderMismatchError,\n} from '../errors/ccip.js'\nimport { HttpRequestError } from '../errors/request.js'\nimport type { Chain } from '../types/chain.js'\nimport type { GetErrorArgs } from '../types/contract.js'\nimport type { Hex } from '../types/misc.js'\n\nimport type { Client } from '../clients/createClient.js'\nimport { decodeErrorResult } from './abi/decodeErrorResult.js'\nimport { encodeAbiParameters } from './abi/encodeAbiParameters.js'\nimport { isAddressEqual } from './address/isAddressEqual.js'\nimport { concat } from './data/concat.js'\nimport { isHex } from './data/isHex.js'\nimport { stringify } from './stringify.js'\n\nexport const offchainLookupSignature = '0x556f1830'\nexport const offchainLookupAbiItem = {\n  name: 'OffchainLookup',\n  type: 'error',\n  inputs: [\n    {\n      name: 'sender',\n      type: 'address',\n    },\n    {\n      name: 'urls',\n      type: 'string[]',\n    },\n    {\n      name: 'callData',\n      type: 'bytes',\n    },\n    {\n      name: 'callbackFunction',\n      type: 'bytes4',\n    },\n    {\n      name: 'extraData',\n      type: 'bytes',\n    },\n  ],\n} as const satisfies Abi[number]\n\nexport async function offchainLookup<TChain extends Chain | undefined,>(\n  client: Client<Transport, TChain>,\n  {\n    blockNumber,\n    blockTag,\n    data,\n    to,\n  }: Pick<CallParameters, 'blockNumber' | 'blockTag'> & {\n    data: Hex\n    to: Address\n  },\n): Promise<Hex> {\n  const { args } = decodeErrorResult({\n    data,\n    abi: [offchainLookupAbiItem],\n  }) as unknown as GetErrorArgs<\n    [typeof offchainLookupAbiItem],\n    'OffchainLookup'\n  >\n  const [sender, urls, callData, callbackSelector, extraData] = args\n\n  try {\n    if (!isAddressEqual(to, sender))\n      throw new OffchainLookupSenderMismatchError({ sender, to })\n\n    const result = await ccipFetch({ data: callData, sender, urls })\n\n    const { data: data_ } = await call(client, {\n      blockNumber,\n      blockTag,\n      data: concat([\n        callbackSelector,\n        encodeAbiParameters(\n          [{ type: 'bytes' }, { type: 'bytes' }],\n          [result, extraData],\n        ),\n      ]),\n      to,\n    } as CallParameters)\n\n    return data_!\n  } catch (err) {\n    throw new OffchainLookupError({\n      callbackSelector,\n      cause: err as BaseError,\n      data,\n      extraData,\n      sender,\n      urls,\n    })\n  }\n}\n\nexport async function ccipFetch({\n  data,\n  sender,\n  urls,\n}: { data: Hex; sender: Address; urls: readonly string[] }) {\n  let error = new Error('An unknown error occurred.')\n\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i]\n    const method =\n      url.includes('{sender}') || url.includes('{data}') ? 'GET' : 'POST'\n    const body = method === 'POST' ? { data, sender } : undefined\n\n    try {\n      const response = await fetch(\n        url.replace('{sender}', sender).replace('{data}', data),\n        {\n          body: JSON.stringify(body),\n          method,\n        },\n      )\n\n      let result\n      if (\n        response.headers.get('Content-Type')?.startsWith('application/json')\n      ) {\n        result = (await response.json()).data\n      } else {\n        result = (await response.text()) as any\n      }\n\n      if (!response.ok) {\n        error = new HttpRequestError({\n          body,\n          details: stringify(result.error) || response.statusText,\n          headers: response.headers,\n          status: response.status,\n          url,\n        })\n        continue\n      }\n\n      if (!isHex(result)) {\n        error = new OffchainLookupResponseMalformedError({\n          result,\n          url,\n        })\n        continue\n      }\n\n      return result\n    } catch (err) {\n      error = new HttpRequestError({\n        body,\n        details: (err as Error).message,\n        url,\n      })\n    }\n  }\n\n  throw error\n}\n"],"names":["OffchainLookupError","_BaseError","_inherits","_super","_createSuper","_ref","_cause$metaMessages","_this","callbackSelector","cause","data","extraData","sender","urls","_classCallCheck","call","shortMessage","metaMessages","concat","_toConsumableArray","length","map","url","getUrl","flat","Object","defineProperty","_assertThisInitialized","_createClass","BaseError","OffchainLookupResponseMalformedError","_BaseError2","_super2","_ref2","_this2","result","stringify","OffchainLookupSenderMismatchError","_BaseError3","_super3","_ref3","_this3","to","isAddressEqual","a","b","isAddress","InvalidAddressError","address","toLowerCase","offchainLookupSignature","offchainLookupAbiItem","name","type","inputs","offchainLookup","_x","_x2","_offchainLookup","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","client","blockNumber","blockTag","_decodeErrorResult","args","_args","callData","_yield$call","data_","wrap","_context","prev","next","decodeErrorResult","abi","_slicedToArray","ccipFetch","sent","encodeAbiParameters","abrupt","t0","stop","_x3","_ccipFetch","_callee2","error","i","method","body","_response$headers$get","response","_context2","Error","includes","undefined","fetch","replace","JSON","headers","get","startsWith","json","text","ok","HttpRequestError","details","statusText","status","isHex","message"],"sourceRoot":""}